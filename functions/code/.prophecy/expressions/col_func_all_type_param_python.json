{"parameters":[{"name":"c_col","type":"column","metadata":{"description":"this is a column one buddy","tags":[],"mappings":[]}},{"name":"c_array_string","type":{"type":"array","elementType":"string","containsNull":true},"metadata":{"description":"","tags":[],"mappings":[]}},{"name":"c_binary","type":"binary","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"c_boolean","type":"boolean","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"c_date","type":"date","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"c_double","type":"double","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"c_float","type":"float","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"c_int","type":"integer","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"c_long","type":"long","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"c_short","type":"short","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"c_string","type":"string","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"c_struct","type":{"type":"struct","fields":[{"name":"c_s_string","type":"string","nullable":false,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"c_s_array_int","type":{"type":"array","elementType":"integer","containsNull":true},"nullable":false,"metadata":{"description":"","mappings":[],"tags":[]}}]},"metadata":{"description":"","tags":[],"mappings":[]}},{"name":"c_timestamp","type":"timestamp","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"c_decimal","type":"decimal(20,10)","metadata":{"description":"","tags":[],"mappings":[]}}],"output":"string","isCustomSchemaEnabled":true,"code":"concat(c_col, c_array_string[0], c_boolean, c_struct.c_s_array_int[0], cast('22' as int) > 5 and \ncast('22' as int)!=0 or \n'first_name' like '%A%' or \n((1 & 1) == c_decimal) or \n((2 | 2) == c_long),\n10*cast('22' as int) == 20 and\n'last_name' != 'first_name' and \n(!(cast('22' as int) == 10)) and\n(cast('22' as int) between 10 and 20) and\n(array(10, c_double, 30)[2] == 30) and\n(map(1, 'Hello', 2, 'World')[1] == 'Hello') and\n(10 ^ 20 == 50),\n(map('three', 3).four == null) and\n(named_struct('a', 5, 'b', 'Spark').a == 5),\n(1=2 and 1==2) and\n(1>=2 and 1<=2 and 1!=3 or 2>4 or 4<5) and\n(exists(array(1, NULL, 3), x -> x % 2 == 0)) or\nilike('Spark', '_PARK') or\n(named_struct('a', 1, 'b', 2) in(named_struct('a', 1, 'b', 1), named_struct('a', 1, 'b', 3))),\n(1 is distinct from 5),\n('invalid' is false),\nisnull(1),\n('t' is not true),\n(1 <=> '1'),\n(1 <> cast('22' as int)),\n(10-2+10 == 8) and\n(not true) and\n(false or true) and\n(2%0 == 0) and\n('Spark' || 'SQL' == 'SparkSQL') and\n(r'%SystemDrive%\\Users\\John' like r'%SystemDrive%\\\\Users%') and\n(r'%SystemDrive%\\Users\\John' rlike '%SystemDrive%\\\\\\\\Users.*'),\n(regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*')) and\n(2L / 2L == 10),\n(~ 0 == -1) and\n(base64(aes_encrypt('Spark', 'abcdefghijklmnop')) == null) and\n(cast(aes_decrypt(unbase64('4A5jOAh9FNGwoMeuJukfllrLdHEZxA2DyuSQAWz77dfn'),'abcdefghijklmnop') AS STRING) == null)\nand (ascii('234') == 234),(base64('Spark SQL') == null),(bin(13)==null),(binary('Spark SQL') == null),\n(btrim('abcaabaSparkSQLabcaaba', 'abc') != null),(char(65)!=null),(char_length('Spark SQL ')==10),(character_length('Spark SQL ')==10),\n(concat('22', 'hello')!=null),(concat_ws(',', 'Spark', array('S', 'Q', NULL, 'L'), NULL)!=null),contains('SparkSQL', 'Spork'),\n(crc32('Spark')>0),chr(65)!=null and (3 ^ 5 == 6),(hex(encode('Spark SQL', 'US-ASCII'))!=null) and\nendswith('SparkSQL', 'SQL'),\n(find_in_set('ab','abc,b,ab,c,def')==2),\n(format_number(12332.123456, 4)==2),\n(format_number(12332.123456, '#.###')==10),\n(format_string('Hello World %d %s', 100, 'days')!=null),\n(hex('Spark SQL')!=null),\n(r'%SystemDrive%\\Users\\John' like '%SystemDrive%\\\\\\\\Users%'),\n(initcap('sPark sql')!=null),\n(instr('SparkSQL', 'R')==2),\n(lcase('LowerCase')!=null),\n(left('Spark SQL', 3)!=null),\n(length('Spark SQL ')>20),\n(levenshtein('kitten', 'sitting')>10),\n(locate('bar', 'abcbarbar')>2),\n(locate('bar', 'abcbarbar', 5)>2),\n(lower('LowerCase')!=null),\n(lpad('hi', 1, '??')!=null),\n(hex(lpad(x'1020', 5, x'05'))!=null),\n(md5('Spark')!=null),\n(octet_length('Spark SQL')!=null),\n(parse_url('http://spark.apache.org/path?query=1', 'HOST')!=null),\n(position('bar', 'abcbarbar')>10),\n(position('bar', 'abcbarbar', 5)>5),\n(printf('Hello World %d %s', 100, 'days')!=null),\n(r'%SystemDrive%\\Users\\John' rlike r'%SystemDrive%\\\\Users.*'),\n(r'%SystemDrive%\\Users\\John' rlike '%SystemDrive%\\\\\\\\Users.*'),\n(regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*')),\n(regexp_extract('100-200', '(\\\\d+)-(\\\\d+)', 1)>10),\n(regexp_extract_all('100-200, 300-400', '(\\\\d+)-(\\\\d+)', 1)!=null),\n(regexp_replace('100-200', '(\\\\d+)', 'num')!=null),\n(repeat('123', 2)!=null),\n(replace('ABCabc', 'abc', 'DEF')!=null),\n(reverse('Spark SQL')!=null),\n(right('Spark SQL', 3)!=null),\n(rpad('hi', 5, 'ab')!=null),\n(hex(rpad(x'1020', 5, x'05'))!=null),\n(sentences('Hi there! Good morning.', 'en', 'US')!=null),\n(sha('Spark')!=null),\n(sha1('Spark')!=null),\n(sha2('Spark', 256)!=null),\n(soundex('Miller')!=null),\n(concat('1', space(2), '1')!=null),\n(('->' || split_part('Hello,world,!', ',', 1) || '<-')!=null),\n(('->' || split_part('', ',', 1) || '<-')!=null),\n(('->' || split_part('Hello,World,!', ',', 0) || '<-')!=null),\n(startswith('SparkSQL', 'Spark')),\n(startswith(NULL, 'Spark')),\n(substr('Spark SQL', 5, 1)!=null),\n(substring_index('www.apache.org', '.', 2)!=null),\n(cast(to_binary('537061726B') AS STRING)!=null),\n(cast(to_binary('537061726B', 'hex') AS STRING)!=null),\n(cast(try_to_binary('U3Bhxcms=', 'base64') AS STRING)!=null),\n(translate('AaBbCc', 'abc', '123')!=null),\n(cast(try_to_binary('U3Bhxcms=', 'base64') AS STRING)!=null),\n(ucase('SparkSql')!=null),\n(cast(unbase64('U3BhcmsgU1FM') AS STRING)!=null),\n(decode(unhex('537061726B2053514C'), 'UTF-8')!=null),\n(upper('SparkSql')!=null),\n(10/2==5),\n((3 | 5)==2),\n(10-2+2==4),\n(2 % 1.8==2),\n(3 ^ 5 == 3),\n(3 & 5 == 2),\n(3 * 2==2),\n((INTERVAL '3' YEAR * 3)!=null),\n(abs(-1)==1),\n(acos(1)==1),\n(acosh(1)==1),\n(asin(0)==1),\n(asinh(0)==1),\n(atan(0)==1),\n(atan2(0, 0)==1),\n(atanh(0)==1),\n(bigint(current_timestamp)>1),\n(bit_count(-1)>1),\n(bit_get(23Y, 1)==1),\n(bround(13.5, -1)==1),\n(round(13.5, -1)==1),\n(cbrt(27.0)==3),\n(ceil(3345.1, -2)==1),\n(ceiling(5.4)==6),\n(ceiling(3345.1, -2)==1),\n(conv('100', 2, 10)==4),\n(conv('FFFFFFFFFFFFFFFF', 16, 10)==1),\n(cos(pi())==-1),\n(cosh(0)==1),\n(cot(1)==1),\n(csc(pi() / 2)==2),\n(decimal('5.2')==5),\n(degrees(3.141592653589793)==10),\n(double('5.2')==4),\n(e()==2),\n(exp(1)==2),\n(expm1(0)==1),\n(factorial(2)==2),\n(float('5.2')==5),\n(floor(-0.1)==-1),\n(floor(3345.1, -2)==20),\n(getbit(23Y, 0)==1),\n(hypot(3, 4)==5),\n(int(-5.6)==5),\n(isnan(cast('NaN' as double))),\n(ln(1)==1),\n(log(10, 100)==2),\n(log1p(0)==1),\n(log2(2)==1),\n(log10(10)==1),\n(nanvl(cast('NaN' AS DOUBLE), 123)==2),\n(negative(1)==-1),\n(pmod(-10, 3)==2),\n(positive(-1)==-1),\n(pow(2, 3)*power(2, 3)==8),\n(radians(180)==10),\n(rand(0)*random(0)==1),\n(randn(0)==1),\n(rint(12.3456)==1),\n(round(2.5, 0)==3),\n(sec(pi())==-1),\n(sin(0)==0),\n(shiftleft(2, 1)==2),\n(shiftright(4, 1)==2),\n(shiftrightunsigned(4, 1)==2),\n(sign(40)==1),\n(signum(40)==1),\n(sinh(0)==1),\n(smallint(-5.6)==5),\n(sqrt(4)==2),\n(tan(0)==1),\n(tanh(0)==1),\n(tinyint('12')*tinyint(5.4)==1),\n(to_number('$345', 'S$999,099.99')+to_number('<1234>', '999999PR')==2),\n(try_add(DATE'2021-03-20', INTERVAL '2' MONTH)!=null),\n(try_add(1, 2)==3),\n(try_divide(3, 2)==3),\n(try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3)!=null),\n(try_subtract(1, 2)==2),\n(try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND)!=null),\n(try_subtract(-128Y, 1Y)!=null),\n(try_to_number('$345', 'S$999,099.99')/try_to_number('<1234>', '999999PR')==1),\n(width_bucket(5.3, 0.2, 10.6, 5)+width_bucket(-0.9, 5.2, 0.5, 2)==3),\n(width_bucket(INTERVAL '1' DAY, INTERVAL '0' DAY, INTERVAL '10' DAY, 11)==10),\n(array(10, 20, 30)!=null),\n((aggregate(array(1, 2, 3), 0, (acc, x) -> acc + x, acc -> acc * 10))==1),\n(array_contains(array(1, 2, 3), 2)),\n(array_distinct(array(1, 2, 3, NULL, 3))!=null),\n(array_except(array(1, 2, 2, 3), array(1, 1, 3, 5))!=null),\n(array_intersect(array(1, 2, 3), array(1, 3, 3, 5))!=null),\n(array_join(array('hello', 'world'), ',')!=null),\n(array_join(array('hello', NULL ,'world'), ',', '*')==null),\n(array_max(array(1, 20, NULL, 3))>10),\n(array_min(array(1, 20, NULL, 3))==1),\n(array_position(array(3, 2, 1, 4, 1), 1)==2),\n(array_remove(array(1, 2, 3, NULL, 3, 2), 3)!=null),\n(array_repeat('123', 2)!=null),\n(array_size(array(1, NULL, 3, NULL))==2),\n(array_sort(array('bc', 'ab', 'dc'),(left, right) -> CASE WHEN left IS NULL and right IS NULL THEN 0 WHEN left IS NULL THEN -1 WHEN right IS NULL THEN 1 WHEN left < right THEN 1 WHEN left > right THEN -1 ELSE 0 END)!=null),\n(array_union(array(1, 2, 2, 3), array(1, 3, 5))!=null),\n(arrays_overlap(array(1, 2, NULL, 3), array(NULL, 4, 5))==null),\n(arrays_zip(array(1, 2), array('shoe', 'string', 'budget'))==null),\n(cardinality(array('b', 'd', 'c', 'a'))==2),\n(concat(array(1, 2, 3), array(4, 5), array(6))!=null),\n(element_at(map(1, 'a', 2, 'b'), 2)==null),\n(exists(array(1, 2, 3), x -> x % 2 == 0)),\n(exists(array(0, NULL, 2, 3, NULL), x -> x IS NULL)),\n(filter(array(1, 2, 3), x -> x % 2 == 1)!=null),\n(flatten(array(array(1, 2), array(3, 4)))!=null),\n(forall(array(1, 2, 3), x -> x % 2 == 0)==null),\n(reverse(array(2, 1, 4, 3))!=null),\n(sequence(5, 1)!=null),\n(cardinality(array('b', 'd', 'c', 'a'))==10),\n(slice(array(1, 2, 3, 4), 2, 2)!=null),\n(sort_array(array('b', 'd', NULL, 'c', 'a'), true)!=null),\n(transform(array(1, 2, 3), x -> x + 1)!=null),\n(try_element_at(array(1, 2, 3), 2)==2),\n(zip_with(array('a', 'b', 'c'), array('d', 'e', 'f'), (x, y) -> concat(x, y))!=null),\n(map(1, 'Hello', 2, 'World')[1]!=null),\n(cardinality(map('a', 1, 'b', 2))==2),\n(element_at(map(1, 'a', 2, 'b'), 3)==null),\n(map(1.0, '2', 3.0, '4') is not null),\n(map_concat(map(1, 'a', 2, 'b'), map(3, 'c')) is not null),\n(map_entries(map(1, 'a', 2, 'b')) is not null),\n(map_filter(map(1, 0, 2, 2, 3, -1), (k, v) -> k > v) is not null),\n(map_from_arrays(array(1.0, 3.0), array('2', '4')) is not null),\n(map_from_entries(array(struct(1, 'a'), struct(2, 'b'))) is not null),\n(map_keys(map(1, 'a', 2, 'b')) is not null),\n(map_values(map(1, 'a', 2, 'b')) is not null),\n(map_zip_with(map(1, 'a', 2, 'b'), map(1, 'x', 2, 'y'), (k, v1, v2) -> concat(v1, v2)) is not null),\n(cardinality(map('a', 1, 'b', 2))==2),\n(str_to_map('a:1,b:2,c:3', ',', ':') is not null),\n(transform_keys(map_from_arrays(array(1, 2, 3), array(1, 2, 3)), (k, v) -> k + 1) is not null),\n(transform_values(map_from_arrays(array(1, 2, 3), array(1, 2, 3)), (k, v) -> k + v) is not null),\n(try_element_at(map(1, 'a', 2, 'b'), 2) is not null),\n((INTERVAL '3:15' HOUR TO MINUTE / 3) is not null),\n((-INTERVAL '5' MONTH)!=null),\n(typeof(current_timestamp - (current_date + INTERVAL '1' DAY))!=null),\n((INTERVAL '3' YEAR * 3)!=null),\n(add_months('2016-08-31', -6)!=null),\n(current_date()!=null),\n(current_timestamp()!=null),\n(current_timezone()!=null),\n(date('2021-03-21')!=null),\n(date_add('2016-07-30', 1)!=null),\n(date_format('2016-04-08', 'y')==2016),\n(date_from_unix_date(1)!=null),\n(date_sub('2016-07-30', 1)!=null),\n(date_trunc('YEAR', '2015-03-05T09:32:05.359')!=null),\n(datediff('2009-07-31', '2009-07-30')==1),\n(day('2009-07-30')==30),\n(dayofmonth('2009-07-30')==30),\n(dayofweek('2009-07-30')==5),\n(dayofyear('2016-04-09')==100),\n(extract(SECONDS FROM INTERVAL '5:00:30.001' HOUR TO SECOND)==30),\n(extract(week FROM TIMESTAMP'2019-08-12 01:00:00.123456')==33),\n(from_unixtime(0, 'yyyy-MM-dd HH:mm:ss')!=null),\n(from_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1')!=null),\n(from_utc_timestamp('2016-08-31', 'Asia/Seoul')!=null),\n(hour('2009-07-30 12:58:59')==10),\n(last_day('2009-01-12') is not null),\n(make_date(2013, 7, 15) is not null),\n(make_dt_interval(0, 0, 1, -0.1) is not null),\n(make_ym_interval(100, 5) is not null),\n(minute('2009-07-30 12:58:59')==58),\n(month('2016-07-30')==7),\n(months_between('1997-02-28 10:30:00', '1996-10-30')==3),\n(months_between('1997-02-28 10:30:00', '1996-10-30', false)==2),\n(next_day('2015-01-14', 'TU')!=null),\n(quarter('2016-08-31')==3),\n(second('2009-07-30 12:58:59')==59),\n(sign(INTERVAL'-1' DAY)==-1),\n(signum(INTERVAL'-1' DAY)==-1),\n(timestamp(123)!=null),\n(timestamp('2020-04-30 12:25:13.45')!=null),\n(timestamp_micros(1230219000123123)!=null),\n(timestamp_millis(1230219000123)!=null),\n(timestamp_seconds(1230219000)!=null),\n(to_date('2016-12-31', 'yyyy-MM-dd')!=null),\n(to_timestamp('2016-12-31', 'yyyy-MM-dd')!=null),\n(to_utc_timestamp( '2017-07-14 02:40:00.0', 'GMT+1')!=null),\n(trunc('2015-10-27', 'YEAR')!=null),\n(trunc('2019-08-04', 'quarter')!=null),\n(try_add(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND)!=null),\n(try_add(DATE'2021-03-31', INTERVAL '1' MONTH)!=null),\n(try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3)!=null),\n((INTERVAL '3' YEAR * 3)!=null),\n(try_subtract(DATE'2021-03-20', INTERVAL '2' MONTH)!=null),\n(try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND)!=null),\n(unix_date(DATE('1970-01-02'))==1),\n(unix_micros(TIMESTAMP('1970-01-01 00:00:01Z'))==1),\n(unix_millis(TIMESTAMP('1970-01-01 00:00:01Z'))==1),\n(unix_seconds(TIMESTAMP('1970-01-01 00:00:01Z'))==1),\n(unix_timestamp('2016-04-08', 'yyyy-MM-dd')==1),\n(weekday(DATE'2009-07-30')==1),\n(extract(DAYOFWEEK_ISO FROM DATE'2009-07-30')==4),\n(weekofyear('2008-02-20')==8),\n(year('2016-07-30')==2016),\n(array(1, 2, 3)!=null),\n(bigint('5')==5),\n(binary('Spark SQL')!=null),\n(boolean(1)),\n(cast(5.6 AS DECIMAL(2, 0))!=null),\n(cast(INTERVAL '1-2' YEAR TO MONTH AS INTEGER)==12),\n(date('2021-03-21')!=null),\n(decimal('5.2')==5),\n(double('5.2')/2==5),\n(float('5.2')/2==2),\n(int('5')==5),\n(make_date(2013, 7, 15)!=null),\n(make_dt_interval(100, 13)!=null),\n(make_ym_interval(100, 5)==null),\n(map(1.0, '2', 3.0, '4') is not null),\n(named_struct('a', 1, 'b', 2, 'c', 3) is not null),\n(smallint('5')==5),\n(struct(1, 2, 3) is not null),\n(tinyint('12')==12),\n(timestamp('2020-04-30 12:25:13.45')!=null),\n(to_date('2016-12-31', 'yyyy-MM-dd')!=null),\n(to_number('-$12,345.67', 'S$999,099.99')>10),\n(to_timestamp('2016-12-31 00:12:00')!=null),\n(try_cast('10' AS INT)==10),\n(try_to_number('-$12,345.67', 'S$999,099.99')!=null),\n(from_csv('1, 0.8', 'a INT, b DOUBLE')!=null),\n(schema_of_csv('1,abc')!=null),\n(json_array_length('[1,2,3,{\"f1\":1,\"f2\":[5,6]},4]')==5),\n(json_object_keys('{\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}')!=null),\n(schema_of_json('[{\"col\":01}]', map('allowNumericLeadingZeros', 'true'))!=null),\n(to_json(named_struct('a', 1, 'b', 2))!=null),\n(to_json(map(named_struct('a', 1),named_struct('b', 2)))!=null),\n(to_json(array((map('a', 1))))!=null),\n(xpath('<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>','a/b/text()')!=null),\n(xpath_boolean('<a><b>1</b></a>','a/b')),\n(xpath_double('<a><b>1</b><b>2</b></a>', 'sum(a/b)')!=null),\n(xpath_float('<a><b>1</b><b>2</b></a>', 'sum(a/b)')!=null),\n(xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)')==2),\n(xpath_long('<a><b>1</b><b>2</b></a>', 'sum(a/b)')==3),\n(xpath_number('<a><b>1</b><b>2</b></a>', 'sum(a/b)')==2),\n(xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)')==2),\n(xpath_string('<a><b>b</b><c>cc</c></a>','a/c')!=null),\n(assert_true(0 < 1)==null),\n((CASE WHEN 1 > 0 THEN 1 WHEN 2 > 0 THEN 2.0 ELSE 1.2 END)==1),\n((CASE 3 WHEN 1 THEN 'A' WHEN 2 THEN 'B' WHEN 3 THEN 'C' END)!=null),\n(coalesce(2, 5 / 0)==2),\n(current_catalog()!=null),\n(current_database()!=null),\n(current_user()!=null),\n(decode(5, 6, 'Spark', 5, 'SQL', 4, 'rocks')!=null),\n(elt(1, 'scala', 'java')!=null),\n(greatest(10, 9, 2, 4, 3)==10),\n(hash('Spark', array(123), 2)!=null),\n(java_method('java.util.UUID', 'fromString', 'a5cf6c42-0c85-418f-af6c-3e4e5b1328f2')!=null),\n(if(1 < 2, 'a', 'b')!=null),\n(ifnull(NULL, array('2'))!=null),\n(input_file_block_length()==-1),\n(input_file_block_start()==-1),\n(input_file_name()!=null),\n(isnull(1)),\n(isnotnull(1)),\n(least(10, 9, 2, 4, 3)==2),\n(monotonically_increasing_id() > 10),\n(nullif(2, 2)==null),\n(nvl(NULL, 2)==2),\n(nvl2(NULL, 2, 1)==1),\n(reflect('java.util.UUID', 'randomUUID')!=null),\n(typeof(1)!=null),\n(uuid()!=null),\n(xxhash64('Spark', array(123), 2)!=null),\n(shuffle(array(1, 20, 3, 5))!=null))","language":"sql","description":""}